// A task runner that invokes Pester to run all Pester tests under the
// current workspace folder.
// NOTE: This Test task runner requires an updated version of Pester (>=4.0.3)
// in order for the problemMatcher to find failed test information (message, line, file).

{
  "version": "2.0.0",
  "windows": {
    "options": {
      "shell": {
        "executable": "C:/Program Files/PowerShell/7/pwsh.exe",
        "args": [
          "-NoProfile",
          "-ExecutionPolicy",
          "Bypass",
          "-Command"
        ]
      }
    }
  },
  "linux": {
    "options": {
      "shell": {
        "executable": "/usr/bin/pwsh",
        "args": [
          "-NoProfile",
          "-Command"
        ]
      }
    }
  },
  "osx": {
    "options": {
      "shell": {
        "executable": "/usr/local/bin/pwsh",
        "args": [
          "-NoProfile",
          "-Command"
        ]
      }
    }
  },
  "tasks": [
    {
      "label": "Test",
      "type": "shell",
      "command": "Invoke-Pester -Path ${fileBasename}.Tests.ps1",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "problemMatcher": [
        "$pester"
      ]
    },
    {
      "label": "Publish",
      "type": "shell",
      "command": "Publish-Script -Path ${file} -Repository ${input:Repository}",
      "problemMatcher": [
      {
        "owner": "powershell",
        "fileLocation": [
          "absolute"
        ],
        "severity": "error",
        "pattern": [
          {
            "regexp": "(.+)",
            "message": 1
          },
          {
            "regexp": "At (.*\\.ps1):(\\d*) char:(\\d*)(.*)",
            "file": 1,
            "line": 2,
            "column": 3
          }
        ]
      }
      ]
    },
    {
      "label": "Add script",
      "type": "shell",
      "command": "Import-Module PWBuild; Invoke-PSMDTemplate -TemplateName PWScript -OutPath ${input:Folder}",
      "problemMatcher": []
    },
    {
      "label": "Add function",
      "type": "shell",
      "command": "Import-Module PWBuild; Invoke-PSMDTemplate -TemplateName PWFunction -OutPath ${input:Folder}",
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "Repository",
      "type": "pickString",
      "description": "Name of the repository to publish",
      "options": [
        "PSGallery",
        "LocalRepo",
        "TeliaInt"
      ],
      "default": "LocalRepo"
    },
    {
      "id": "Folder",
      "type": "promptString",
      "description": "Folder where to create new file.",
      "default": "${workspaceFolder}\\src"
    }
  ]
}